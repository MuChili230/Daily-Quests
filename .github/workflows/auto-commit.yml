name: Daily GitHub Activity

env:
  TZ: Asia/Shanghai

on:
  schedule:
    - cron: '0 00 * * *'  # UTC 0 点触发 = 北京时间 8 点
  workflow_dispatch:

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      # 2. Weekend lazy check
      - name: Weekend lazy check
        id: lazy
        run: |
          DOW=$(date +%u)
          if [ "$DOW" -gt 5 ] && [ $((RANDOM % 100)) -lt 20 ]; then
            echo "lazy=true" >> $GITHUB_OUTPUT
            echo "✨ 周末偷懒，今天摸鱼" >> update.md
          else
            echo "lazy=false" >> $GITHUB_OUTPUT
          fi

      # 3. Random delay
      - name: Random delay
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          DELAY=$((RANDOM % 2))
          sleep $DELAY

      # 4. Ensure update.md exists
      - name: Ensure update.md exists
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          [ -f update.md ] || echo "# Daily Commit Log" > update.md

      # 5. Random commit
      - name: Commit update.md
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          PROB_COMMIT=70
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_COMMIT ]; then
            git config user.name "$GH_USER"
            git config user.email "$GH_EMAIL"
            echo "📦 提交日志 -> $(date '+%Y-%m-%d %H:%M:%S')" >> update.md
            git add update.md
            git commit -m "chore: daily log update" || echo "No changes"
            git fetch origin main
            git rebase origin/main || git rebase --abort
            git push origin HEAD:main || git push --force-with-lease origin HEAD:main
          else
            echo "🌿 今天不提交代码" >> update.md
          fi

      # 6. Create Issue
      - name: Create Issue
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PROB_ISSUE=35
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_ISSUE ]; then
            LABELS=("bug" "enhancement" "discussion")
            LABEL=${LABELS[$RANDOM % ${#LABELS[@]}]}
            ISSUE_JSON=$(gh issue create \
              --title "Daily Issue - $(date '+%Y-%m-%d %H:%M:%S')" \
              --body "随机生成每日 Issue 🌱" \
              --label "$LABEL" \
              --repo $GITHUB_REPOSITORY \
              --json number)
            ISSUE_NUM=$(echo "$ISSUE_JSON" | jq -r '.number')
            echo "📝 创建 Issue #$ISSUE_NUM ($LABEL)" >> update.md
          else
            echo "🌿 今天不创建 Issue" >> update.md
          fi

      # 7. Create Pull Request
      - name: Create Pull Request
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          PROB_PR=35
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_PR ]; then
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            git checkout -b "$BRANCH"
            git config user.name "$GH_USER"
            git config user.email "$GH_EMAIL"
            echo "📦 创建 PR -> 分支: $BRANCH" >> update.md
            git add update.md
            git commit -m "chore: daily PR update"
            git push origin "$BRANCH"
            gh pr create --title "Daily PR - $(date '+%Y-%m-%d %H:%M:%S')" \
                         --body "随机生成每日 PR 🌱" \
                         --base main --head "$BRANCH" --repo $GITHUB_REPOSITORY
          else
            echo "🌿 今天不创建 PR" >> update.md
          fi

      # 8. Auto Review & Merge PR
      - name: Auto Review and Merge
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PR_LIST=$(gh pr list --state open --repo "$GITHUB_REPOSITORY" --json number -q '.[].number')
          if [ -n "$PR_LIST" ]; then
            PR_NUM=$(echo "$PR_LIST" | shuf -n1)
            gh pr review "$PR_NUM" --comment --body "🤖 自动审查：LGTM！"
            gh pr merge "$PR_NUM" --squash --delete-branch --repo "$GITHUB_REPOSITORY" --admin
            echo "✅ 自动合并了 PR #$PR_NUM" >> update.md
          fi

      # 9. Auto Close Issues
      - name: Auto Close Issues
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          ISSUE_LIST=$(gh issue list --state open --repo "$GITHUB_REPOSITORY" --json number -q '.[].number')
          if [ -n "$ISSUE_LIST" ]; then
            ISSUE_NUM=$(echo "$ISSUE_LIST" | shuf -n1)
            gh issue close "$ISSUE_NUM" --repo "$GITHUB_REPOSITORY"
            echo "🚫 自动关闭 Issue #$ISSUE_NUM" >> update.md
          else
            echo "🎉 没有需要关闭的 Issue" >> update.md
          fi

      # 10. Star & Fork repos of target user
      - name: Star & Fork repos
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          TARGET_USER: ${{ secrets.STAR_FORK_USER }}
        run: |
          for repo in $(gh repo list $TARGET_USER --json name -q '.[].name'); do
            FULL_REPO="$TARGET_USER/$repo"

            # Star 检查
            if ! gh api "/user/starred/$FULL_REPO" >/dev/null 2>&1; then
              gh api --method PUT -H "Accept: application/vnd.github+json" "/user/starred/$FULL_REPO"
              echo "⭐ Star -> $FULL_REPO" >> update.md
            fi

            # Fork 检查
            if ! gh repo view "$GITHUB_REPOSITORY_OWNER/$repo" >/dev/null 2>&1; then
              gh repo fork "$FULL_REPO" --clone=false --remote=false
              echo "🍴 Fork -> $FULL_REPO" >> update.md
            fi
          done

      # 11. Clean up old merged branches
      - name: Clean up old merged branches
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          NOW=$(date +%s)
          gh pr list --state merged --repo "$GITHUB_REPOSITORY" --json number,headRefName,mergedAt -q '.[]' | while read pr; do
            PR_NUM=$(echo "$pr" | jq -r '.number')
            BRANCH=$(echo "$pr" | jq -r '.headRefName')
            MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')
            MERGED_TS=$(date -u -d "$MERGED_AT" +%s)
            AGE=$(( (NOW - MERGED_TS) / 86400 ))
            if [[ "$BRANCH" == daily-pr-* && $AGE -gt 7 ]]; then
              git push origin --delete "$BRANCH" || true
              echo "🗑️ 删除已合并超过 7 天的分支 -> $BRANCH" >> update.md
            fi
          done

      # 12. Daily summary
      - name: Write summary
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          NOW=$(date +"%Y-%m-%d %H:%M:%S")
          LOG_FILE="update.md"

          echo -e "\n### 🌙 今日总结" >> "$LOG_FILE"
          echo "[$NOW] 今日任务完成 ✅" >> "$LOG_FILE"
          echo "- 📦 提交次数: $(grep -c '📦 提交日志' $LOG_FILE)" >> "$LOG_FILE"
          echo "- 📝 创建 Issue: $(grep -c '📝 创建 Issue' $LOG_FILE)" >> "$LOG_FILE"
          echo "- 📦 创建 PR: $(grep -c '📦 创建 PR' $LOG_FILE)" >> "$LOG_FILE"
          echo "- ✅ 合并 PR: $(grep -c '✅ 自动合并了 PR' $LOG_FILE)" >> "$LOG_FILE"
          echo "- 🚫 关闭 Issue: $(grep -c '🚫 自动关闭 Issue' $LOG_FILE)" >> "$LOG_FILE"
          echo "- ⭐ Star: $(grep -c '⭐ Star' $LOG_FILE)" >> "$LOG_FILE"
          echo "- 🍴 Fork: $(grep -c '🍴 Fork' $LOG_FILE)" >> "$LOG_FILE"
          echo "- 🗑️ 清理分支: $(grep -c '🗑️ 删除已合并' $LOG_FILE)" >> "$LOG_FILE"

          git config user.name "$GH_USER"
          git config user.email "$GH_EMAIL"
          git add "$LOG_FILE"
          git commit -m "chore: daily summary with counts" || echo "No changes"
          git fetch origin main
          git rebase origin/main || git rebase --abort
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
