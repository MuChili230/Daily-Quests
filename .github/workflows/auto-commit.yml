name: Daily GitHub Activity

env:
  TZ: Asia/Shanghai

on:
  schedule:
    - cron: '0 00 * * *'  # UTC 0 点触发 = 北京时间 8 点
  workflow_dispatch:

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      # 2. Weekend lazy check
      - name: Weekend lazy check
        id: lazy
        run: |
          DOW=$(date +%u)
          if [ "$DOW" -gt 5 ] && [ $((RANDOM % 100)) -lt 20 ]; then
            echo "lazy=true" >> $GITHUB_OUTPUT
            echo "今天周末，选择摸鱼 ✨" >> update.md
          else
            echo "lazy=false" >> $GITHUB_OUTPUT
          fi

      # 3. Random delay
      - name: Random delay
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          DELAY=$((RANDOM % 2))
          sleep $DELAY

      # 4. Ensure update.md exists
      - name: Ensure update.md exists
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          [ -f update.md ] || echo "# Daily Commit Log" > update.md

      # 5. Random commit (深绿格子)
      - name: Commit update.md
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          PROB_COMMIT=60
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_COMMIT ]; then
            git config user.name "$GH_USER"
            git config user.email "$GH_EMAIL"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - 日志更新 🌱" >> update.md
            git add update.md
            git commit -m "chore: daily log update" || echo "No changes"
            git fetch origin main
            git rebase origin/main || git rebase --abort
            git push origin HEAD:main || git push --force-with-lease origin HEAD:main
          else
            echo "今天不 commit 🌿" >> update.md
          fi

      # 6. Create Issue (浅绿格子)
      - name: Create Issue
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PROB_ISSUE=35
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_ISSUE ]; then
            LABELS=("bug" "enhancement" "discussion")
            LABEL=${LABELS[$RANDOM % ${#LABELS[@]}]}
            gh issue create --title "Daily Issue - $(date '+%Y-%m-%d %H:%M:%S')" \
                            --body "随机生成每日 Issue 🌱" \
                            --label "$LABEL" \
                            --repo $GITHUB_REPOSITORY
            echo "📝 创建了一个 Issue ($LABEL)" >> update.md
          else
            echo "今天不创建 Issue 🌿" >> update.md
          fi

      # 7. Create Pull Request (浅绿格子)
      - name: Create Pull Request
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          PROB_PR=35
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_PR ]; then
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            git checkout -b "$BRANCH"
            git config user.name "$GH_USER"
            git config user.email "$GH_EMAIL"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - 自动 PR 日志 🌱" >> update.md
            git add update.md
            git commit -m "chore: daily PR update"
            git push origin "$BRANCH"
            gh pr create --title "Daily PR - $(date '+%Y-%m-%d %H:%M:%S')" \
                         --body "随机生成每日 PR 🌱" \
                         --base main --head "$BRANCH" --repo $GITHUB_REPOSITORY
          else
            echo "今天不创建 PR 🌿" >> update.md
          fi

      # 8. Auto Review & Merge PR (浅绿格子)
      - name: Auto Review and Merge
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          PR_LIST=$(gh pr list --state open --repo "$GITHUB_REPOSITORY" --json number -q '.[].number')
          if [ -n "$PR_LIST" ]; then
            PR_NUM=$(echo "$PR_LIST" | shuf -n1)
            gh pr review "$PR_NUM" --comment --body "🤖 自动审查：LGTM！"
            gh pr merge "$PR_NUM" --squash --delete-branch --repo "$GITHUB_REPOSITORY" --admin
            echo "✅ 自动合并了 PR #$PR_NUM" >> update.md
          fi

      # 9. Auto Close Issues (浅绿格子)
      - name: Auto Close Issues
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          ISSUE_LIST=$(gh issue list --state open --repo "$GITHUB_REPOSITORY" --json number -q '.[].number')
          if [ -n "$ISSUE_LIST" ]; then
            ISSUE_NUM=$(echo "$ISSUE_LIST" | shuf -n1)
            gh issue close "$ISSUE_NUM" --repo "$GITHUB_REPOSITORY"
            echo "🚫 自动关闭了 Issue #$ISSUE_NUM" >> update.md
          else
            echo "🎉 没有需要关闭的 Issue" >> update.md
          fi

      # 11. Star & Fork all repos of a specific user (with duplicate check)
      - name: Star & Fork user repos
        if: steps.lazy.outputs.lazy != 'true'
        id: starforkuser
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TARGET_USER="MooCheelee"  # 👈 改成你要操作的 GitHub 用户名

          echo "开始处理 $TARGET_USER 的仓库 ⭐🍴"
          repos=$(gh repo list $TARGET_USER --json nameWithOwner -q '.[].nameWithOwner')

          STAR_COUNT=0
          FORK_COUNT=0

          for repo in $repos; do
            echo "检查仓库: $repo"

            # ⭐ 检查是否已加星
            if gh api "user/starred/$repo" &>/dev/null; then
              echo "✅ 已加星过 $repo，跳过 ⭐"
            else
              gh api --method PUT "user/starred/$repo"
              echo "⭐ Starred $repo" >> update.md
              STAR_COUNT=$((STAR_COUNT+1))
            fi

            # 🍴 检查是否已 Fork
            USERNAME=$(echo "$repo" | cut -d'/' -f1)
            REPONAME=$(echo "$repo" | cut -d'/' -f2)
            MY_REPO="${GITHUB_ACTOR}/${REPONAME}"

            if gh repo view "$MY_REPO" &>/dev/null; then
              echo "✅ 已 Fork 过 $repo，跳过 🍴"
            else
              gh repo fork "$repo" --clone=false --default-branch-only
              echo "🍴 Forked $repo" >> update.md
              FORK_COUNT=$((FORK_COUNT+1))
            fi
          done

          echo "⭐ 共新增 $STAR_COUNT 个 Star, 🍴 共新增 $FORK_COUNT 个 Fork" >> update.md

          echo "STAR_USER_COUNT=$STAR_COUNT" >> $GITHUB_OUTPUT
          echo "FORK_USER_COUNT=$FORK_COUNT" >> $GITHUB_OUTPUT
          
      # 11. Clean up old merged branches (不影响格子)
      - name: Clean up old merged branches
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          NOW=$(date +%s)
          gh pr list --state merged --repo "$GITHUB_REPOSITORY" --json number,headRefName,mergedAt -q '.[]' | while read pr; do
            PR_NUM=$(echo "$pr" | jq -r '.number')
            BRANCH=$(echo "$pr" | jq -r '.headRefName')
            MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')
            MERGED_TS=$(date -u -d "$MERGED_AT" +%s)
            AGE=$(( (NOW - MERGED_TS) / 86400 ))
            if [[ "$BRANCH" == daily-pr-* && $AGE -gt 7 ]]; then
              git push origin --delete "$BRANCH" || true
            fi
          done

      # 12. Daily summary
      - name: Write summary
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          NOW=$(date +"%Y-%m-%d %H:%M:%S")
          LOG_FILE="update.md"
          LOG_COUNT=$(grep -c '🌱' $LOG_FILE || echo 0)
          ISSUE_COUNT=$(grep -c '📝 创建了一个 Issue' $LOG_FILE || echo 0)
          PR_COUNT=$(grep -c '📦 提交了一个 PR' $LOG_FILE || echo 0)
          MERGED_COUNT=$(grep -c '✅ 自动合并了 PR' $LOG_FILE || echo 0)
          STAR_COUNT=$(grep -c '⭐' $LOG_FILE || echo 0)
          FORK_COUNT=$(grep -c '🍴' $LOG_FILE || echo 0)
          CLEAN_LOG_COUNT=$(grep -c '清理超过 7 天的旧日志' $LOG_FILE || echo 0)
          CLEAN_BRANCH_COUNT=$(grep -c '🗑️ 删除已合并超过 7 天的分支' $LOG_FILE || echo 0)

          echo -e "\n### 🌙 今日总结" >> "$LOG_FILE"
          echo "[$NOW] 今日任务完成 ✅" >> "$LOG_FILE"
          echo "- 📝 日志条目: $LOG_COUNT" >> "$LOG_FILE"
          echo "- 🔧 创建 Issue: $ISSUE_COUNT" >> "$LOG_FILE"
          echo "- 📦 创建 PR: $PR_COUNT" >> "$LOG_FILE"
          echo "- ✅ 合并 PR: $MERGED_COUNT" >> "$LOG_FILE"
          echo "- ⭐ Star: $STAR_COUNT" >> "$LOG_FILE"
          echo "- 🍴 Fork: $FORK_COUNT" >> "$LOG_FILE"
          echo "- 🧹 清理日志: $CLEAN_LOG_COUNT" >> "$LOG_FILE"
          echo "- 🧹 清理分支: $CLEAN_BRANCH_COUNT" >> "$LOG_FILE"

          git config user.name "$GH_USER"
          git config user.email "$GH_EMAIL"
          git add "$LOG_FILE"
          git commit -m "chore: daily summary with counts" || echo "No changes"
          git fetch origin main
          git rebase origin/main || git rebase --abort
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
       
