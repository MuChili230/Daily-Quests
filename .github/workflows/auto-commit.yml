name: Daily GitHub Activity

env:
  TZ: Asia/Shanghai

on:
  schedule:
    - cron: '0 00 * * *'
  workflow_dispatch:

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Ensure update.md exists
        run: |
          if [ ! -f update.md ]; then
            echo -e "# 🌿 每日 GitHub 活动日志\n\n**日期：$(date '+%Y-%m-%d')**\n" > update.md
          fi

      - name: Weekend lazy check
        id: lazy
        run: |
          TIME=$(date '+%H:%M:%S')
          DOW=$(date +%u)
          if [ "$DOW" -gt 5 ] && [ $((RANDOM % 100)) -lt 20 ]; then
            echo "lazy=true" >> $GITHUB_OUTPUT
            echo "- ✨ $TIME 今天周末，选择摸鱼" >> update.md
          else
            echo "lazy=false" >> $GITHUB_OUTPUT
            echo "- 💪 $TIME 今天工作日，正常执行" >> update.md

      - name: Random delay
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          TIME=$(date '+%H:%M:%S')
          DELAY=$((RANDOM % 2))
          echo "- ⏳ $TIME 随机延迟 $DELAY 秒" >> update.md
          sleep $DELAY

      - name: Commit update.md
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          TIME=$(date '+%H:%M:%S')
          PROB_COMMIT=60
          RAND=$((RANDOM % 100 + 1))
          git config user.name "$GH_USER"
          git config user.email "$GH_EMAIL"
          if [ $RAND -le $PROB_COMMIT ]; then
            echo "- 🌱 $TIME 提交日志更新" >> update.md
            git add update.md
            git commit -m "chore: daily log update" || true
            git fetch origin main
            git rebase origin/main || git rebase --abort
            git push origin HEAD:main || git push --force-with-lease origin HEAD:main
          else
            echo "- 🌱 $TIME 今天不 commit" >> update.md

      - name: Create Issue
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TIME=$(date '+%H:%M:%S')
          PROB_ISSUE=35
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_ISSUE ]; then
            LABELS=("bug" "enhancement" "discussion")
            LABEL=${LABELS[$RANDOM % ${#LABELS[@]}]}
            TITLE="Daily Issue - $(date '+%Y-%m-%d %H:%M:%S')"
            gh issue create --title "$TITLE" --body "随机生成每日 Issue 🌱" --label "$LABEL" --repo $GITHUB_REPOSITORY
            echo "- 📝 $TIME 创建 Issue ($LABEL)" >> update.md
          else
            echo "- 📝 $TIME 今天不创建 Issue" >> update.md

      - name: Create Pull Request
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          TIME=$(date '+%H:%M:%S')
          PROB_PR=35
          RAND=$((RANDOM % 100 + 1))
          if [ $RAND -le $PROB_PR ]; then
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            git checkout -b "$BRANCH"
            git config user.name "$GH_USER"
            git config user.email "$GH_EMAIL"
            git add update.md
            git commit -m "chore: daily PR update" || true
            git push origin "$BRANCH"
            TITLE="Daily PR - $(date '+%Y-%m-%d %H:%M:%S')"
            gh pr create --title "$TITLE" --body "随机生成每日 PR 🌱" --base main --head "$BRANCH" --repo $GITHUB_REPOSITORY
            echo "- 📦 $TIME 创建 PR" >> update.md
          else
            echo "- 📦 $TIME 今天不创建 PR" >> update.md

      - name: Auto Review and Merge PR
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TIME=$(date '+%H:%M:%S')
          gh pr list --state open --repo "$GITHUB_REPOSITORY" --json number -q '.[].number' > pr_open.json
          if [ -s pr_open.json ]; then
            PR_NUM=$(jq -r '.[0]' pr_open.json)
            gh pr review "$PR_NUM" --comment --body "🤖 自动审查：LGTM！"
            gh pr merge "$PR_NUM" --squash --delete-branch --repo "$GITHUB_REPOSITORY" --admin
            echo "- ✅ $TIME 合并 PR #$PR_NUM" >> update.md
          fi

      - name: Auto Close Issues
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TIME=$(date '+%H:%M:%S')
          gh issue list --state open --repo "$GITHUB_REPOSITORY" --json number -q '.[].number' > issue_open.json
          if [ -s issue_open.json ]; then
            ISSUE_NUM=$(jq -r '.[0]' issue_open.json)
            gh issue close "$ISSUE_NUM" --repo "$GITHUB_REPOSITORY"
            echo "- 🚫 $TIME 关闭 Issue #$ISSUE_NUM" >> update.md
          else
            echo "- 🚫 $TIME 无需关闭 Issue" >> update.md

      - name: Clean up old merged branches and logs
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TIME=$(date '+%H:%M:%S')
          NOW=$(date +%s)
          REMOTE_BRANCHES=$(git ls-remote --heads origin | awk '{print $2}' | sed 's|refs/heads/||')
          gh pr list --state merged --repo "$GITHUB_REPOSITORY" --json number,headRefName,mergedAt -q '.[]' > pr_merged.json
          jq -c '.' pr_merged.json | while read pr; do
            BRANCH=$(echo "$pr" | jq -r '.headRefName')
            MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')
            MERGED_TS=$(date -u -d "$MERGED_AT" +%s)
            AGE=$(( (NOW - MERGED_TS) / 86400 ))
            if [[ "$BRANCH" == daily-pr-* && $AGE -gt 7 ]]; then
              if echo "$REMOTE_BRANCHES" | grep -q "^$BRANCH$"; then
                git push origin --delete "$BRANCH" || true
                echo "- 🗑️ $TIME 删除已合并超过 7 天的分支 $BRANCH" >> update.md
              fi
            fi
          done
          echo "- 🧹 $TIME 清理超过 7 天的旧日志" >> update.md

      - name: Daily summary
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_EMAIL: ${{ secrets.GH_EMAIL }}
        run: |
          NOW=$(date '+%Y-%m-%d %H:%M:%S')
          LOG_FILE="update.md"
          COMMIT_COUNT=$(grep -c '🌱' $LOG_FILE || echo 0)
          ISSUE_COUNT=$(grep -c '📝' $LOG_FILE || echo 0)
          PR_COUNT=$(grep -c '📦' $LOG_FILE || echo 0)
          MERGED_COUNT=$(grep -c '✅' $LOG_FILE || echo 0)
          CLOSED_COUNT=$(grep -c '🚫' $LOG_FILE || echo 0)
          CLEAN_LOG_COUNT=$(grep -c '🧹' $LOG_FILE || echo 0)
          CLEAN_BRANCH_COUNT=$(grep -c '🗑️' $LOG_FILE || echo 0)
          echo -e "\n---\n\n🌙 **今日总结 [$NOW]**" >> "$LOG_FILE"
          echo "- 📝 日志条目: $COMMIT_COUNT" >> "$LOG_FILE"
          echo "- 🔧 创建 Issue: $ISSUE_COUNT" >> "$LOG_FILE"
          echo "- 📦 创建 PR: $PR_COUNT" >> "$LOG_FILE"
          echo "- ✅ 合并 PR: $MERGED_COUNT" >> "$LOG_FILE"
          echo "- 🚫 关闭 Issue: $CLOSED_COUNT" >> "$LOG_FILE"
          echo "- 🧹 清理日志: $CLEAN_LOG_COUNT" >> "$LOG_FILE"
          echo "- 🗑️ 清理分支: $CLEAN_BRANCH_COUNT" >> "$LOG_FILE"
          git config user.name "$GH_USER"
          git config user.email "$GH_EMAIL"
          git add "$LOG_FILE"
          git commit -m "chore: daily summary with counts" || true
          git fetch origin main
          git rebase origin/main || git rebase --abort
          git push origin HEAD:main || git push --force-with-lease origin HEAD:main
      
