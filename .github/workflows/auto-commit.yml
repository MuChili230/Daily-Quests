name: Daily GitHub Activity

on:
  schedule:
    - cron: '0 00 * * *'  # UTC 每天 0 点触发
  workflow_dispatch:

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取仓库
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      # 2. 周末懒惰模式判断
      - name: Weekend lazy check
        id: lazy
        run: |
          DOW=$(date +%u)
          if [ $DOW -gt 5 ] && [ $((RANDOM % 100)) -lt 40 ]; then
            echo "lazy=true" >> $GITHUB_OUTPUT
            echo "今天周末，选择摸鱼 ✨"
            echo "今天周末，选择摸鱼 ✨" >> update.md
          else
            echo "lazy=false" >> $GITHUB_OUTPUT

      # 3. 随机延迟 0~6 小时
      - name: Random delay
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          DELAY=$((RANDOM % 2))
          echo "等待 $DELAY 秒再执行..."
          sleep $DELAY

      # 4. 确保日志文件存在
      - name: Ensure update.md exists
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          if [ ! -f update.md ]; then
            echo "# Daily Commit Log" > update.md
          fi

      # 5. 开场白
      - name: Write daily intro
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          LOG_DATE=$(date '+%Y-%m-%d')
          echo -e "\n## $LOG_DATE" >> update.md
          MOODS=("✨ 开始今天的 Github 冒险！" "☕ 边喝咖啡边写点代码～" "🛠️ 今天也要折腾一番！" "📖 记录一下日常操作")
          echo "${MOODS[$RANDOM % ${#MOODS[@]}]}" >> update.md

      # 6. 日常随机日志
      - name: Append random logs
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          LOG_FILE="update.md"
          for i in $(seq 1 $((RANDOM % 3 + 1))); do
            NOW=$(date '+%H:%M:%S')
            THOUGHTS=("🌱 随手记下一笔" "✍️ 突然想到点东西" "🚀 来一发 PR" "📌 打个小补丁" "🎯 试试新点子")
            echo "[$NOW] ${THOUGHTS[$RANDOM % ${#THOUGHTS[@]}]}" >> $LOG_FILE

      # 7. 提交日志
      - name: Commit and push log
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git stash push --include-untracked -m "auto-stash"
          git pull --rebase origin main || git rebase --abort
          git stash pop || true
          git commit -m "chore: daily log update" || echo "No changes"
          git push origin HEAD:main

      # 8. 清理七天前日志内容
      - name: Clean logs older than 7 days
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          FILE="update.md"
          if [ -f "$FILE" ]; then
            SEVEN_DAYS_AGO=$(date -d '7 days ago' '+%Y-%m-%d')
            awk -v d="$SEVEN_DAYS_AGO" '
              /^## / {date=$2}
              date >= d {print}
            ' "$FILE" > "$FILE.tmp"
            mv "$FILE.tmp" "$FILE"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            git commit -m "chore: clean logs older than 7 days" || echo "No changes"
            git push origin main
          fi

      # 9. 创建 Issue 或 PR（按概率）并计数
      - name: Create Issue or PR
        if: steps.lazy.outputs.lazy != 'true'
        id: issuepr
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          CREATED_ISSUE=0
          CREATED_PR=0
          PROB_ISSUE=30
          PROB_PR=40
          RAND=$(( RANDOM % 100 + 1 ))

          if [ $RAND -le $PROB_ISSUE ]; then
              gh issue create --title "Daily Issue - $(date '+%Y-%m-%d')" \
                              --body "随机生成每日 Issue 🌱" \
                              --repo $GITHUB_REPOSITORY
              CREATED_ISSUE=1
          elif [ $RAND -le $((PROB_ISSUE + PROB_PR)) ]; then
              BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
              git checkout -b $BRANCH
              echo "$(date '+%Y-%m-%d %H:%M:%S') - 自动 PR 日志 🌱" >> update.md
              git add update.md
              git commit -m "chore: daily PR update"
              git push origin $BRANCH
              gh pr create --title "Daily PR - $(date '+%Y-%m-%d')" \
                           --body "随机生成每日 PR 🌱" \
                           --base main --head $BRANCH --repo $GITHUB_REPOSITORY
              CREATED_PR=1
          else
              echo "今天不创建 Issue 或 PR 🌱"
          fi

          echo "CREATED_ISSUE=$CREATED_ISSUE" >> $GITHUB_OUTPUT
          echo "CREATED_PR=$CREATED_PR" >> $GITHUB_OUTPUT

      # 10. 自动 Review + 合并 PR
      - name: Auto Review and Merge
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TARGET_REPO="${GITHUB_REPOSITORY}"
          PR_LIST=$(gh pr list --state open --repo "$TARGET_REPO" --json number -q '.[].number')
          if [ -n "$PR_LIST" ]; then
            PR_NUM=$(echo "$PR_LIST" | shuf -n1)
            gh pr review "$PR_NUM" --comment --body "🤖 自动审查：LGTM！"
            gh pr merge "$PR_NUM" --squash --delete-branch --repo "$TARGET_REPO" --admin

      # 11. 自动 Star + Fork（按概率）并计数
      - name: Star and Fork random repos (with probability)
        if: steps.lazy.outputs.lazy != 'true'
        id: starfork
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          STAR_COUNT=0
          FORK_COUNT=0
          PROB_ACTION=50
          RAND=$(( RANDOM % 100 + 1 ))

          if [ $RAND -le $PROB_ACTION ]; then
            ACTION_COUNT=$((RANDOM % 2 + 1))
            repos=$(gh api search/repositories -X GET -F q='stars:>50000 sort:stars' --jq '.items[].full_name' | shuf -n $ACTION_COUNT)
            
            for repo in $repos; do
              gh api --method PUT "user/starred/$repo"
              echo "⭐ Starred $repo" >> update.md
              STAR_COUNT=$((STAR_COUNT+1))

              gh repo fork "$repo" --clone=false
              echo "🍴 Forked $repo" >> update.md
              FORK_COUNT=$((FORK_COUNT+1))
            done

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add update.md
            git commit -m "chore: daily Star & Fork update" || echo "No changes"
            git push origin HEAD:main
          else
            echo "今天不进行 Star/Fork 🌱" >> update.md

          echo "STAR_COUNT=$STAR_COUNT" >> $GITHUB_OUTPUT
          echo "FORK_COUNT=$FORK_COUNT" >> $GITHUB_OUTPUT

      # 12. 清理已合并 7 天前的分支
      - name: Clean up old merged branches
        if: steps.lazy.outputs.lazy != 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          TARGET_REPO="${GITHUB_REPOSITORY}"
          NOW=$(date +%s)
          gh pr list --state merged --repo "$TARGET_REPO" --json number,headRefName,mergedAt -q '.[]' | while read pr; do
            PR_NUM=$(echo "$pr" | jq -r '.number')
            BRANCH=$(echo "$pr" | jq -r '.headRefName')
            MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')
            MERGED_TS=$(date -u -d "$MERGED_AT" +%s)
            AGE=$(( (NOW - MERGED_TS) / 86400 ))
            if [[ "$BRANCH" == daily-pr-* && $AGE -gt 7 ]]; then
              echo "🗑️ 删除已合并超过 7 天的分支: $BRANCH (PR #$PR_NUM)"
              git push origin --delete "$BRANCH" || true
            fi
          done

      # 13. 日终总结（含操作统计）
      - name: Write summary
        if: steps.lazy.outputs.lazy != 'true'
        run: |
          ISSUE=${{ steps.issuepr.outputs.CREATED_ISSUE }}
          PR=${{ steps.issuepr.outputs.CREATED_PR }}
          STAR=${{ steps.starfork.outputs.STAR_COUNT }}
          FORK=${{ steps.starfork.outputs.FORK_COUNT }}

          LOG_DATE=$(date '+%Y-%m-%d')
          SUMMARY="🌙 $LOG_DATE 今日小结：$ISSUE 个 Issue, $PR 个 PR, $STAR 个 Star, $FORK 个 Fork ⭐🍴"
          
          # 将统计写在日志开头
          echo -e "$SUMMARY\n$(cat update.md)" > update.md

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add update.md
          git commit -m "chore: daily summary with counts" || echo "No changes"
          git push origin HEAD:main
