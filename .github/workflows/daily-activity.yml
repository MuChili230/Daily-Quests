# Name: Daily GitHub Activity
# Description: 模拟日常 GitHub 活跃度，自动提交日志、创建 Issue 和 PR，并自动 Review 和合并。

name: Daily GitHub Activity

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 0 点触发
  workflow_dispatch:

# 权限设置，确保 GITHUB_TOKEN 有足够的权限来写内容和处理 PR
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  daily-activity:
    runs-on: ubuntu-latest

    steps:
      # 拉取仓库
      - name: Checkout repo
        uses: actions/checkout@v3

      # 随机延迟 0~24 小时，模拟更自然的用户行为
      # 注意：这会增加工作流执行时间的不确定性
      - name: Random delay
        run: |
          DELAY=$((RANDOM % 1))
          echo "等待 $DELAY 秒再执行..."
          sleep $DELAY

      # 引入并运行消息脚本，获取随机的提交信息和 PR 文本
      - name: Load random messages
        id: messages
        run: |
          # 确保脚本可执行
          chmod +x scripts/messages.sh
          # 将脚本的输出保存为 GitHub Actions 的环境变量
          echo "commit_msg=$(./scripts/messages.sh get_random_commit_message)" >> $GITHUB_OUTPUT
          echo "pr_title=$(./scripts/messages.sh get_random_pr_title)" >> $GITHUB_OUTPUT
          echo "pr_body=$(./scripts/messages.sh get_random_pr_body)" >> $GITHUB_OUTPUT

      # --- 提交日志 (Commit) ---
      - name: Append and commit daily log
        run: |
          LOG_FILE="update.md"
          
          # 确保日志文件存在并有初始内容
          if [ ! -f $LOG_FILE ]; then
            echo "# Daily Commit Log" > $LOG_FILE
          fi
          
          # 检查文件大小，如果大于 1MB 则清空
          if [[ $(stat -c %s "$LOG_FILE") -gt 1048576 ]]; then
            echo "文件超过 1MB，正在清空..."
            echo "# Daily Commit Log" > $LOG_FILE
          fi
          
          # 追加每日日志
          echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') - 自动提交日志 🌱" >> $LOG_FILE
          
          # 检查是否有文件变动，如果有则提交
          if ! git diff --quiet --exit-code $LOG_FILE; then
            echo "发现文件变动，正在提交..."
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add $LOG_FILE
            git commit -m "${{ steps.messages.outputs.commit_msg }}"
            git push origin main
          else
            echo "文件无变动，跳过提交。"
          fi

      # --- 随机创建 Issue ---
      - name: Randomly create Issue
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            echo "正在生成每日 Issue..."
            gh issue create --title "Daily Issue - $(TZ='Asia/Shanghai' date '+%Y-%m-%d')" \
                             --body "随机生成每日 Issue 🌱"
          else
            echo "跳过创建 Issue。"
          fi
          
      # --- 随机创建 PR 并自动合并 ---
      - name: Randomly create PR, auto-review and merge
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RAND=$((RANDOM % 100))
          if [ $RAND -lt 30 ]; then
            echo "正在生成每日 PR..."
            BRANCH="daily-pr-$(date '+%Y%m%d%H%M%S')"
            LOG_FILE="update.md"

            git checkout -b $BRANCH
            echo "$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S') - 自动 PR 日志 🌱" >> $LOG_FILE
            git add $LOG_FILE
            git commit -m "${{ steps.messages.outputs.pr_title }}"
            git push origin $BRANCH

            # 创建 PR
            PR_URL=$(gh pr create --title "${{ steps.messages.outputs.pr_title }}" \
                                  --body "${{ steps.messages.outputs.pr_body }}" \
                                  --base main \
                                  --head $BRANCH \
                                  --repo $GITHUB_REPOSITORY)
            
            PR_NUM=$(echo "$PR_URL" | sed 's:.*/::')
            echo "成功创建 PR: $PR_URL"
            echo "PR #$PR_NUM 等待自动 Review 和合并..."
            
            # 提交 Review
            gh pr review "$PR_NUM" --comment --body "🤖 自动审查：看起来不错，准备合并！"
            
            # 自动合并 PR
            gh pr merge "$PR_NUM" --squash --delete-branch
            echo "PR #$PR_NUM 已自动合并并删除分支。"
          else
            echo "跳过创建 PR。"
          fi
          
      # --- 随机给其他仓库加星 ---
      - name: Randomly star a repo
        env:
          # 此处必须使用 PAT，因为 GITHUB_TOKEN 无法给外部仓库加星
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          RAND=$((RANDOM % 100))
          # 30% 概率执行加星操作
          if [ $RAND -lt 30 ]; then
            echo "正在寻找有趣的仓库并加星..."
            
            # 模拟“逛” GitHub 的行为，随机获取热门项目
            # 使用 GitHub CLI 的 gh search 命令来查找最近热门的项目
            REPO_TO_STAR=$(gh search repos "stars:>10 created:>$(( $(date +%s) - 86400 * 30 ))" \
                           --sort stars --order desc --limit 10 \
                           --jq '.[].fullName' | shuf -n1)
            
            # 如果找到仓库，执行加星操作
            if [ -n "$REPO_TO_STAR" ]; then
              echo "发现一个有趣的项目：$REPO_TO_STAR"
              # 使用 GitHub CLI 的 gh api 调用 REST API 来加星
              gh api --method PUT "user/starred/$REPO_TO_STAR"
              echo "已成功加星。"
            else
          else
            echo"跳过加星操作。"
          fi

      # --- 定期清理已合并的旧分支（7天前） ---
      - name: Clean up old merged branches
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "开始清理 7 天前已合并的 PR 分支..."
          
          # 使用 gh 命令获取所有已合并的 PR，并按时间倒序排序
          # 过滤出 7 天前合并的 PR，获取其分支名
          BRANCHES_TO_DELETE=$(gh pr list --state merged --json headRefName,mergedAt --jq '.[] | select(.mergedAt | fromdateiso8601 < (now - 604800)) | .headRefName' --paginate)

          if [ -z "$BRANCHES_TO_DELETE" ]; then
            echo "没有找到需要清理的旧分支。"
            exit 0
          fi

          echo "$BRANCHES_TO_DELETE" | while read branch; do
            # 检查分支名是否以 "daily-pr-" 开头，防止误删
            if [[ "$branch" == "daily-pr-"* ]]; then
              echo "正在删除分支: $branch"
              git push origin --delete $branch || true
            else
              echo "跳过非 'daily-pr-' 开头的分支: $branch"
            fi
          done
          echo "清理完成。"
